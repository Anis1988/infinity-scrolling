{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nexport default function useBookSearch(query, pageNumber) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [books, setBook] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    let cancel;\n    axios({\n      methode: \"GET\",\n      url: \"http://openlibrary.org/search.json\",\n      params: {\n        q: query,\n        page: pageNumber\n      },\n      // that how they called id \"params\",\"q\",\"page\"\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setBook(prevBooks => {\n        return [...new Set([...prevBooks, ...res.data.docs.map(t => t.title)])]; //unique set\n      });\n      setHasMore(res.data.length > 0);\n      setLoading(false);\n    }).catch(e => {\n      if (axios.isCancel(e)) return; //this is meant to ignore all the cancellation we meant to cancel\n\n      setError(true);\n    });\n    return () => cancel();\n  }, [query, pageNumber]);\n  return {\n    loading,\n    error,\n    hasMore,\n    books\n  };\n}","map":{"version":3,"sources":["/Users/anismedini/Downloads/infinity-scrolling-js/src/useBookSearch.js"],"names":["React","useState","useEffect","axios","useBookSearch","query","pageNumber","loading","setLoading","error","setError","books","setBook","hasMore","setHasMore","cancel","methode","url","params","q","page","cancelToken","CancelToken","c","then","res","prevBooks","Set","data","docs","map","t","title","length","catch","e","isCancel"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6BC,UAA7B,EAAyC;AACxD,QAAK,CAACC,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,IAAD,CAApC;AACA,QAAK,CAACQ,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAK,CAACU,KAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACY,OAAD,EAASC,UAAT,IAAuBb,QAAQ,CAAC,KAAD,CAApC;AAGIC,EAAAA,SAAS,CAAC,MAAI;AACVM,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,QAAIK,MAAJ;AACAZ,IAAAA,KAAK,CAAC;AACFa,MAAAA,OAAO,EAAC,KADN;AAEFC,MAAAA,GAAG,EAAC,oCAFF;AAGFC,MAAAA,MAAM,EAAC;AAACC,QAAAA,CAAC,EAACd,KAAH;AAAUe,QAAAA,IAAI,EAACd;AAAf,OAHL;AAGiC;AACnCe,MAAAA,WAAW,EAAE,IAAIlB,KAAK,CAACmB,WAAV,CAAsBC,CAAC,IAAGR,MAAM,GAAGQ,CAAnC;AAJX,KAAD,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAG;AACVb,MAAAA,OAAO,CAACc,SAAS,IAAI;AACjB,eAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGD,SAAJ,EAAc,GAAGD,GAAG,CAACG,IAAJ,CAASC,IAAT,CAAcC,GAAd,CAAkBC,CAAC,IAAEA,CAAC,CAACC,KAAvB,CAAjB,CAAR,CAAJ,CAAP,CADiB,CACoD;AACxE,OAFM,CAAP;AAGAlB,MAAAA,UAAU,CAACW,GAAG,CAACG,IAAJ,CAASK,MAAT,GAAkB,CAAnB,CAAV;AACAzB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAXD,EAWG0B,KAXH,CAWSC,CAAC,IAAG;AACT,UAAGhC,KAAK,CAACiC,QAAN,CAAeD,CAAf,CAAH,EAAsB,OADb,CACoB;;AAC7BzB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAdD;AAeA,WAAO,MAAMK,MAAM,EAAnB;AACH,GArBQ,EAqBP,CAACV,KAAD,EAAOC,UAAP,CArBO,CAAT;AAuBA,SAAM;AAACC,IAAAA,OAAD;AAASE,IAAAA,KAAT;AAAeI,IAAAA,OAAf;AAAuBF,IAAAA;AAAvB,GAAN;AAEH","sourcesContent":["import React, {useState,useEffect}from \"react\";\nimport axios from 'axios';\n\nexport default function useBookSearch(query,pageNumber) {\nconst[loading,setLoading] = useState(true)\nconst[error,setError] = useState(false)\nconst[books,setBook] = useState([])\nconst[hasMore,setHasMore] = useState(false)\n\n\n    useEffect(()=>{\n        setLoading(true)\n        setError(false)\n\n        let cancel\n        axios({\n            methode:\"GET\",\n            url:\"http://openlibrary.org/search.json\",\n            params:{q:query, page:pageNumber}, // that how they called id \"params\",\"q\",\"page\"\n            cancelToken: new axios.CancelToken(c=> cancel = c)\n        }).then(res=> {\n            setBook(prevBooks => {\n                return [...new Set([...prevBooks,...res.data.docs.map(t=>t.title)])] //unique set\n            })\n            setHasMore(res.data.length > 0)\n            setLoading(false)\n        }).catch(e=> {\n            if(axios.isCancel(e)) return //this is meant to ignore all the cancellation we meant to cancel\n            setError(true)\n        })\n        return () => cancel()\n    },[query,pageNumber])\n\n    return{loading,error,hasMore,books}\n\n}"]},"metadata":{},"sourceType":"module"}