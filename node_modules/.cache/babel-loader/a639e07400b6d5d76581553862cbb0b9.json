{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nexport default function useBookSearch(query, pageNumber) {\n  useEffect(() => {\n    let cancel;\n    axios({\n      methode: \"GET\",\n      url: \"http://openlibrary.org/search.json\",\n      params: {\n        q: query,\n        page: pageNumber\n      },\n      // that how they called id \"params\",\"q\",\"page\"\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      console.log(res.data);\n    }).catch(e => {\n      if (axios.isCancel(e)) return; //this is meant to ignore all the cancellation we meant to cancel\n    });\n    return () => cancel;\n  }, [query, pageNumber]);\n  return null;\n}","map":{"version":3,"sources":["/Users/anismedini/Downloads/infinity-scrolling-js/src/useBookSearch.js"],"names":["React","useState","useEffect","axios","useBookSearch","query","pageNumber","cancel","methode","url","params","q","page","cancelToken","CancelToken","c","then","res","console","log","data","catch","e","isCancel"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6BC,UAA7B,EAAyC;AAGpDJ,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIK,MAAJ;AACAJ,IAAAA,KAAK,CAAC;AACFK,MAAAA,OAAO,EAAC,KADN;AAEFC,MAAAA,GAAG,EAAC,oCAFF;AAGFC,MAAAA,MAAM,EAAC;AAACC,QAAAA,CAAC,EAACN,KAAH;AAAUO,QAAAA,IAAI,EAACN;AAAf,OAHL;AAGiC;AACnCO,MAAAA,WAAW,EAAE,IAAIV,KAAK,CAACW,WAAV,CAAsBC,CAAC,IAAGR,MAAM,GAAGQ,CAAnC;AAJX,KAAD,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAG;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACH,KAPD,EAOGC,KAPH,CAOSC,CAAC,IAAG;AACT,UAAGnB,KAAK,CAACoB,QAAN,CAAeD,CAAf,CAAH,EAAsB,OADb,CACoB;AAChC,KATD;AAUA,WAAO,MAAMf,MAAb;AACH,GAbQ,EAaP,CAACF,KAAD,EAAOC,UAAP,CAbO,CAAT;AAcA,SAAO,IAAP;AAGH","sourcesContent":["import React, {useState,useEffect}from \"react\";\nimport axios from 'axios';\n\nexport default function useBookSearch(query,pageNumber) {\n\n\n    useEffect(()=>{\n        let cancel\n        axios({\n            methode:\"GET\",\n            url:\"http://openlibrary.org/search.json\",\n            params:{q:query, page:pageNumber}, // that how they called id \"params\",\"q\",\"page\"\n            cancelToken: new axios.CancelToken(c=> cancel = c)\n        }).then(res=> {\n            console.log(res.data)\n        }).catch(e=> {\n            if(axios.isCancel(e)) return //this is meant to ignore all the cancellation we meant to cancel\n        })\n        return () => cancel\n    },[query,pageNumber])\n    return null\n\n\n}"]},"metadata":{},"sourceType":"module"}