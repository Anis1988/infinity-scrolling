{"ast":null,"code":"import _slicedToArray from\"/Users/anismedini/Downloads/infinity-scrolling-js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useRef,useState}from'react';import useBookSearch from\"./useBookSearch\";function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),query=_useState2[0],setQuery=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),pageNumber=_useState4[0],setPageNumber=_useState4[1];var _useBookSearch=useBookSearch(query,pageNumber),books=_useBookSearch.books,hasMore=_useBookSearch.hasMore,loading=_useBookSearch.loading,error=_useBookSearch.error;var observer=useRef();var lastBookElement=useCallback(function(node){if(loading)return;if(observer.current)observer.current.disconnect();observer.current=new IntersectionObserver(function(entries){if(entries[0].isIntersecting&&hasMore){setPageNumber(function(prevPageNumber){return prevPageNumber+1;});}});if(node)observer.current.observe(node);console.log(node);},[loading,hasMore]);function handelSearch(e){setQuery(e.target.value);setPageNumber(1);}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:query,onChange:handelSearch}),books.map(function(book,index){if(books.length===index+1){return/*#__PURE__*/React.createElement(\"div\",{ref:lastBookElement,key:book},book);}else{return/*#__PURE__*/React.createElement(\"div\",{key:book},book);}}),/*#__PURE__*/React.createElement(\"div\",null,loading&&'Loading...'));}export default App;","map":{"version":3,"sources":["/Users/anismedini/Downloads/infinity-scrolling-js/src/App.js"],"names":["React","useCallback","useRef","useState","useBookSearch","App","query","setQuery","pageNumber","setPageNumber","books","hasMore","loading","error","observer","lastBookElement","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","console","log","handelSearch","e","target","value","map","book","index","length"],"mappings":"oIAAA,MAAOA,CAAAA,KAAP,EAAeC,WAAf,CAA4BC,MAA5B,CAAoCC,QAApC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAGA,QAASC,CAAAA,GAAT,EAAe,eACcF,QAAQ,CAAC,EAAD,CADtB,wCACJG,KADI,eACEC,QADF,8BAEwBJ,QAAQ,CAAC,CAAD,CAFhC,yCAEJK,UAFI,eAEOC,aAFP,kCAGyBL,aAAa,CAACE,KAAD,CAAOE,UAAP,CAHtC,CAGJE,KAHI,gBAGJA,KAHI,CAGEC,OAHF,gBAGEA,OAHF,CAGUC,OAHV,gBAGUA,OAHV,CAGkBC,KAHlB,gBAGkBA,KAHlB,CAKX,GAAMC,CAAAA,QAAQ,CAAGZ,MAAM,EAAvB,CACA,GAAMa,CAAAA,eAAe,CAAGd,WAAW,CAAC,SAAAe,IAAI,CAAI,CACxC,GAAGJ,OAAH,CAAY,OACZ,GAAGE,QAAQ,CAACG,OAAZ,CAAqBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB,GACrBJ,QAAQ,CAACG,OAAT,CAAmB,GAAIE,CAAAA,oBAAJ,CAAyB,SAAAC,OAAO,CAAI,CACnD,GAAGA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,EAA6BV,OAAhC,CAAyC,CACrCF,aAAa,CAAC,SAAAa,cAAc,QAAIA,CAAAA,cAAc,CAAE,CAApB,EAAf,CAAb,CACH,CACJ,CAJkB,CAAnB,CAKA,GAAGN,IAAH,CAASF,QAAQ,CAACG,OAAT,CAAiBM,OAAjB,CAAyBP,IAAzB,EACTQ,OAAO,CAACC,GAAR,CAAYT,IAAZ,EACH,CAVkC,CAUjC,CAACJ,OAAD,CAASD,OAAT,CAViC,CAAnC,CAYA,QAASe,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACrBpB,QAAQ,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR,CACApB,aAAa,CAAC,CAAD,CAAb,CACH,CAED,mBACE,qDACI,6BAAO,IAAI,CAAC,MAAZ,CAAmB,KAAK,CAAEH,KAA1B,CAAiC,QAAQ,CAAEoB,YAA3C,EADJ,CAEKhB,KAAK,CAACoB,GAAN,CAAU,SAACC,IAAD,CAAMC,KAAN,CAAgB,CACvB,GAAGtB,KAAK,CAACuB,MAAN,GAAiBD,KAAK,CAAE,CAA3B,CAA8B,CAC9B,mBAAO,2BAAK,GAAG,CAAEjB,eAAV,CAA2B,GAAG,CAAEgB,IAAhC,EAAuCA,IAAvC,CAAP,CACH,CAFG,IAEG,CACC,mBAAO,2BAAK,GAAG,CAAEA,IAAV,EAAiBA,IAAjB,CAAP,CACP,CAEA,CAPA,CAFL,cAUM,+BAAMnB,OAAO,EAAI,YAAjB,CAVN,CADF,CAeH,CACD,cAAeP,CAAAA,GAAf","sourcesContent":["import React, {useCallback, useRef, useState} from 'react';\nimport useBookSearch from \"./useBookSearch\";\n\n\nfunction App() {\n    const [query,setQuery] = useState('')\n    const [pageNumber,setPageNumber] = useState(1)\n    const {books,hasMore,loading,error}=useBookSearch(query,pageNumber)\n\n    const observer = useRef()\n    const lastBookElement = useCallback(node => {\n        if(loading) return\n        if(observer.current) observer.current.disconnect()\n        observer.current = new IntersectionObserver(entries => {\n            if(entries[0].isIntersecting && hasMore) {\n                setPageNumber(prevPageNumber => prevPageNumber +1 )\n            }\n        })\n        if(node) observer.current.observe(node)\n        console.log(node)\n    },[loading,hasMore])\n\n    function handelSearch(e) {\n        setQuery(e.target.value)\n        setPageNumber(1)\n    }\n\n    return (\n      <>\n          <input type=\"text\" value={query} onChange={handelSearch}/>\n          {books.map((book,index) => {\n              if(books.length === index +1) {\n              return <div ref={lastBookElement} key={book}>{book}</div>\n          } else {\n                  return <div key={book}>{book}</div>\n          }\n\n          })}\n            <div>{loading && 'Loading...'}</div>\n            {/* <div>{error && 'Error'}</div> */}\n      </>\n  )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}